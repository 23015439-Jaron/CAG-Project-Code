const express = require('express');
const mysql = require('mysql2');
const multer = require('multer');
const app = express();

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'public/images'); 
    },
    filename: (req, file, cb) => {
        cb(null, file.originalname);
    }   
});


const upload = multer({storage: storage});

const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'eeveelution_labs'
});

connection.connect((err) => {
    if (err) {
        console.error('Error connecting to MySQL:', err);
        return;
    }
    console.log('Connected to MySQL database');
});

app.set('view engine', 'ejs')

app.use(express.static('public'));

app.use(express.urlencoded({
    extended: false
}));

app.use(express.static('public'));

app.get('/', (req, res) => {
    const sql = ('SELECT * FROM pokedex')
    connection.query(sql, (error, results) => {
        if (error) {
            console.error('Database query error:', error.message);
            return res.status(500).send('Error Retrieving pokedex')
        }
        res.render('index', { pokedex: results });
    });
});


// Route to render the pokedex page with all Pokémon
app.get('/pokedex', (req, res) => {
    let sql = 'SELECT * FROM pokedex';
    const params = [];

    if (req.query.sort) {
        if (req.query.sort === 'id-asc') {
            sql += ' ORDER BY pokemonId ASC';
        } else if (req.query.sort === 'id-desc') {
            sql += ' ORDER BY pokemonId DESC';
        } else if (req.query.sort === 'name-asc') {
            sql += ' ORDER BY name ASC';
        } else if (req.query.sort === 'name-desc') {
            sql += ' ORDER BY name DESC';
        }
    }
    connection.query(sql, (error, results) => {
        if (error) {
            console.error('Database query error:', error.message);
            return res.status(500).send('Error retrieving pokedex');
        }
        res.render('pokedex', { pokemons: results });
    });
});

// Route to render a specific Pokémon's details
app.get('/pokedex/:id', (req, res) => {
    const pokemonId = req.params.id;
    const sql = 'SELECT * FROM pokedex WHERE pokemonId = ?';
    connection.query(sql, [pokemonId], (error, results) => {
        if (error) {
            console.error('Database query error:', error.message);
            return res.status(500).send('Error retrieving pokedex by ID');
        }
        if (results.length > 0) {
            res.render('pokeDetails', { pokemon: results[0] }); // Render to 'pokeDetails.ejs' assuming you have this template
        } else {
            res.status(404).send('Pokémon not found');
        }
    });
});
app.get('/pokeshop', (req, res) => {
    let sql = 'SELECT * FROM products'; // Change from const to let
    const params = [];

    if (req.query.sort) {
        if (req.query.sort === 'price-asc') {
            sql += ' ORDER BY price ASC';
        } else if (req.query.sort === 'price-desc') {
            sql += ' ORDER BY price DESC';
        } else if (req.query.sort === 'name-asc') {
            sql += ' ORDER BY name ASC';
        } else if (req.query.sort === 'name-desc') {
            sql += ' ORDER BY name DESC';
        }
    }

    connection.query(sql, (error, results) => {
        if (error) {
            console.error('Database query error:', error.message);
            return res.status(500).send('Error retrieving products');
        }
        res.render('pokeshop', { products: results });
    });
});

app.get('/product/:id', (req, res) => {
    const productId = req.params.id;
    const sql = 'SELECT * FROM products WHERE productId = ?';
    connection.query(sql, [productId], (error, results) => {
        if (error) {
            console.error('Database query error:', error.message);
            return res.status(500).send('Error retrieving product by ID');
        }
        if (results.length > 0) {
            res.render('product', { product: results[0] });
        } else {
            res.status(404).send('Product not found');
        }
    });
});


app.get('/addProduct', (req, res) => {
    res.render('addProduct');
});

app.post('/addProduct', upload.single('image'), (req, res) => {
    const { name, price, quantity } = req.body;
    const image = req.file.filename; // filename generated by multer

    const sql = 'INSERT INTO products (name, price, quantity, image) VALUES (?, ?, ?, ?)';
    connection.query(sql, [name, price, quantity, image], (error, results) => {
        if (error) {
            console.error("Error adding product:", error);
            res.status(500).send('Error adding product');
        } else {
            res.redirect('/addProduct');
        }
    });
});



app.get('/editProduct/:id', (req,res) => {
    const productId = req.params.id;
    const sql = 'SELECT * FROM products WHERE productId = ?';
    // Fetch data from MySQL based on the product ID
    connection.query( sql , [productId], (error, results) => {
        if (error) {
            console.error('Database query error:', error.message);
            return res.status(500).send('Error retrieving product by ID');
        }
        // Check if any product with the given ID was found
        if (results.length > 0) {
            // Render HTML page with the product data
            res.render('editProduct', { product: results[0] });
        } else {
            // If no product with the given ID was found, render a 404 page or handle it accordingly
            res.status(404).send('Product not found');
        }
    });
});

app.post('/editProduct/:id', upload.single('image'), (req, res) => {
    const productId = req.params.id;
    // Extract product data from the request body
    const { name, price, quantity } = req.body;
    let image = req.body.currentImage;
    if (req.file) {
        image = req.file.filename;
    }
 
    const sql = 'UPDATE products SET name = ? , price = ?, quantity = ?, image = ? WHERE productId = ?';
 
    // Insert the new product into the database
    connection.query( sql , [name, price, quantity, image, productId], (error, results) => {
        if (error) {
            // Handle any error that occurs during the database operation
            console.error("Error updating product:", error);
            res.status(500).send('Error updating product');
        } else {
            // Send a success response
            res.redirect('/pokeshop');
        }
    });
});

app.post('/deleteProduct/:id', (req, res) => {
    const productId = req.params.id;
    const sql = 'DELETE FROM products WHERE productId = ?';
    connection.query(sql, [productId], (error, results) => {
        if (error) {
            console.error("Error deleting product:", error);
            res.status(500).send('Error deleting product');
        } else {
            res.redirect('/pokeshop');
        }
    });
});

// Get cart items
app.get('/cart', (req, res) => {
    const sql = 'SELECT * FROM cart';
    connection.query(sql, (err, results) => {
        if (err) {
            console.error('Database query error:', err.message);
            return res.status(500).send('Error retrieving cart items');
        }

        // Calculate the total price
        const totalPrice = results.reduce((sum, item) => sum + item.price * item.quantity, 0);

        res.render('cart', { cart: results, totalPrice });
    });
});



const fetchProductDetailsFromDatabase = (productId, callback) => {
    const sql = 'SELECT * FROM products WHERE productId = ?';
    connection.query(sql, [productId], (err, results) => {
        if (err) {
            return callback(err, null);
        }
        if (results.length > 0) {
            return callback(null, results[0]);
        } else {
            return callback(new Error('Product not found'), null);
        }
    });
};  

// Add to cart
app.post('/add-to-cart/:productId', (req, res) => {
    const { productId } = req.params;
    const { quantity } = req.body;

    fetchProductDetailsFromDatabase(productId, (error, product) => {
        if (error) {
            console.error('Error fetching product details:', error.message);
            return res.status(500).send('Error fetching product details');
        }

        const sql = 'INSERT INTO cart (name, quantity, price) VALUES (?, ?, ?)';
        const values = [product.name, quantity, product.price];
        connection.query(sql, values, (err, result) => {
            if (err) {
                console.error('Error adding product to cart:', err.message);
                return res.status(500).send('Error adding product to cart');
            }
            console.log('Product added to cart successfully.');
            res.redirect('/pokeshop');
        });
    });
});


// Update cart item
app.post('/update-cart/:cartId', (req, res) => {
    const { cartId } = req.params;
    const { quantity } = req.body;

    const sql = 'UPDATE cart SET quantity = ? WHERE cartId = ?';
    connection.query(sql, [quantity, cartId], (err, result) => {
        if (err) {
            console.error('Error updating cart item:', err.message);
            return res.status(500).send('Error updating cart item');
        }
        console.log('Cart item updated successfully.');
        res.redirect('/cart');
    });
});

// Delete from cart
app.post('/delete-from-cart/:cartId', (req, res) => {
    const { cartId } = req.params;

    const sql = 'DELETE FROM cart WHERE cartId = ?';
    connection.query(sql, [cartId], (err, result) => {
        if (err) {
            console.error('Error deleting cart item:', err.message);
            return res.status(500).send('Error deleting cart item');
        }
        console.log('Cart item deleted successfully.');
        res.redirect('/cart');
    });
});


app.get('/contact', (req, res) => {
    res.render('contact');

});
app.post('/contact', (req, res) => {
    const { name, email, phone, feedback } = req.body;
    // Handle the form submission logic here, e.g., save to database, send email, etc.
    res.redirect('/thankyou');
});

app.get('/thankyou', (req, res) => {
    res.render('thankyou');
});



const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
